{"version":3,"file":"static/js/961.fce9d128.chunk.js","mappings":"mTAQO,SAAeA,IAAtB,4CAAO,OAAP,oBAAO,oGACcC,EAAAA,EAAAA,IAAA,sBADd,cACCC,EADD,yBAGEA,EAAKC,MAHP,kEANPF,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBG,QAAS,oCASJ,IAAMC,EAAe,mCAAG,WAAMC,GAAN,uFACVL,EAAAA,EAAAA,IAAA,iBAAoBK,EAApB,qBADU,cACvBJ,EADuB,yBAGtBA,EAAKC,MAHiB,2CAAH,sDAMrB,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,uFACcP,EAAAA,EAAAA,IAAA,6BAAgCO,IAD9C,cACCN,EADD,yBAGEA,EAAKC,MAHP,kEAMA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA8BH,GAA9B,uFACcL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,aADd,cACCJ,EADD,yBAGEA,EAAKC,MAHP,kEAKA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgCJ,GAAhC,uFACcL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,aADd,cACCJ,EADD,yBAGEA,EAAKC,MAHP,kE,0CCvBP,UARqB,WACnB,OACE,0BACE,wBAAI,qBAGT,C,4ECJYQ,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,MAAM,UACNC,MAAM,MACNC,SAAS,EACTC,UAAU,yBAGf,C,oBCPD,IAHkB,SAAAC,GAChB,OAAOA,EAAG,yCAAqCA,GAF9B,qEAGlB,C,4ICgFD,UA5EuB,WAAO,IAAD,IACnBV,GAAaW,EAAAA,EAAAA,MAAbX,SACR,GAA0BY,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE4CpB,EAAAA,EAAAA,IAAgBC,GAF5D,OAEUoB,EAFV,OAGIN,EAASM,GAHb,gDAKIC,QAAQN,MAAR,MACAC,GAAS,GANb,0DADc,uBAAC,WAAD,wBAUdM,EACD,GAAE,CAACtB,IAEJ,IAAMuB,GAAqBC,EAAAA,EAAAA,QAAM,oBAACP,EAASQ,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAE1D,OACE,gCACGX,IAAS,SAAC,UAAD,IACTF,IACC,iCACE,SAAC,KAAD,CAASc,GAAIJ,EAAmBK,QAAhC,SAAyC,aACzC,4BACE,gBACEC,KAAKC,EAAAA,EAAAA,GAAUjB,EAAMkB,aACrBC,IAAI,eACJzB,MAAO,WAET,0BACGM,EAAMoB,gBACP,4BAAM,KAAGpB,EAAMqB,aAAaC,OAAO,EAAG,CAAC,IAAI,WAE7C,yBAAG,eAAatB,EAAMuB,iBACtB,wBAAI,cACJ,uBAAIvB,EAAMwB,YACV,wBAAI,YACJ,wBACGxB,EAAMyB,OAAOC,KAAI,WAAWC,GAAW,IAAnBC,EAAkB,EAAlBA,KACnB,OAAO,wBAAiBA,GAARD,EACjB,YAMR3B,IACC,4BACE,wBAAI,4BACJ,2BACE,yBACE,SAAC,KAAD,CAASc,GAAG,OAAZ,SAAmB,YAErB,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,SAAsB,qBAK9B,SAAC,EAAAe,SAAD,CACEC,UACE,2BAAK,sBAEH,SAAC,IAAD,OAJN,UAQE,SAAC,KAAD,QAIP,C","sources":["api.js","components/ErrorMessages/ErrorMessages.jsx","components/Loader/Loader.jsx","getDefaultImg.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.params = {\n  api_key: '7194b7b08f433157032a7a5a310c946f',\n};\n\nexport async function fetchTrendingMovies() {\n  const resp = await axios.get(`trending/movie/day`);\n\n  return resp.data;\n}\n\nexport const fetchMoviesById = async moviesId => {\n  const resp = await axios.get(`/movie/${moviesId}?&language=en-US`);\n\n  return resp.data;\n};\n\nexport async function fetchMoviesBySearch(searchQuery) {\n  const resp = await axios.get(`search/movie?query=${searchQuery}`);\n\n  return resp.data;\n}\n\nexport async function fetchCastMovie(moviesId) {\n  const resp = await axios.get(`movie/${moviesId}/credits`);\n\n  return resp.data;\n}\nexport async function fetchReviwsMovie(moviesId) {\n  const resp = await axios.get(`movie/${moviesId}/reviews`);\n\n  return resp.data;\n}\n","const ErrorMessage = () => {\n  return (\n    <div>\n      <h3>Not found page!</h3>\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import { FallingLines } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <FallingLines\n      color=\"#4fa94d\"\n      width=\"100\"\n      visible={true}\n      ariaLabel=\"falling-lines-loading\"\n    />\n  );\n};\n","const defaultImgURL = `https://image.tmdb.org/t/p/original/wwemzKWzjKYJFfCeiB57q3r4Bcm.svg`;\nconst getPoster = url => {\n  return url ? `https://image.tmdb.org/t/p/w300${url}` : defaultImgURL;\n};\nexport default getPoster;\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { NavLink, Outlet, useLocation, useParams } from 'react-router-dom';\nimport ErrorMessage from 'components/ErrorMessages/ErrorMessages';\nimport { fetchMoviesById } from 'api';\nimport { Loader } from 'components/Loader/Loader';\nimport getPoster from 'getDefaultImg';\n\nconst MoviesDetailes = () => {\n  const { moviesId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        const respInformationAboutMovie = await fetchMoviesById(moviesId);\n        setMovie(respInformationAboutMovie);\n      } catch (error) {\n        console.error(error);\n        setError(true);\n      }\n    }\n    fetchMovies();\n  }, [moviesId]);\n\n  const backLinkLocatinRef = useRef(location.state?.from ?? '/');\n\n  return (\n    <>\n      {error && <ErrorMessage />}\n      {movie && (\n        <>\n          <NavLink to={backLinkLocatinRef.current}>Go back</NavLink>\n          <div>\n            <img\n              src={getPoster(movie.poster_path)}\n              alt=\"Poster movie\"\n              width={'300px'}\n            />\n            <h2>\n              {movie.original_title}\n              <span> ({movie.release_date.substr(0, [4])})</span>\n            </h2>\n            <p>User Score: {movie.vote_average}</p>\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n            <h3>Genres</h3>\n            <ul>\n              {movie.genres.map(({ name }, index) => {\n                return <li key={index}>{name}</li>;\n              })}\n            </ul>\n          </div>\n        </>\n      )}\n\n      {movie && (\n        <div>\n          <h3>Additional information</h3>\n          <ul>\n            <li>\n              <NavLink to=\"cast\">Cast</NavLink>\n            </li>\n            <li>\n              <NavLink to=\"reviews\">Reviews</NavLink>\n            </li>\n          </ul>\n        </div>\n      )}\n      <Suspense\n        fallback={\n          <div>\n            Loading subpage...\n            <Loader />\n          </div>\n        }\n      >\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\nexport default MoviesDetailes;\n"],"names":["fetchTrendingMovies","axios","resp","data","api_key","fetchMoviesById","moviesId","fetchMoviesBySearch","searchQuery","fetchCastMovie","fetchReviwsMovie","Loader","color","width","visible","ariaLabel","url","useParams","useState","movie","setMovie","error","setError","location","useLocation","useEffect","respInformationAboutMovie","console","fetchMovies","backLinkLocatinRef","useRef","state","from","to","current","src","getPoster","poster_path","alt","original_title","release_date","substr","vote_average","overview","genres","map","index","name","Suspense","fallback"],"sourceRoot":""}